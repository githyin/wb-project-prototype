{"ast":null,"code":"var _jsxFileName = \"D:\\\\wb-project-prototype\\\\client\\\\src\\\\component\\\\ChatScreen\\\\Chatbotscreen.jsx\",\n  _s = $RefreshSig$();\nimport * as React from \"react\";\nimport { Box, TextField, Button, Typography, Avatar, Grid, Paper } from \"@mui/material\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst messages = [{\n  id: 1,\n  text: \"Hi there!\",\n  sender: \"bot\"\n}, {\n  id: 2,\n  text: \"Hello!\",\n  sender: \"user\"\n}, {\n  id: 3,\n  text: \"How can I assist you today?\",\n  sender: \"bot\"\n}];\nconst Chatbotscreen = () => {\n  _s();\n  const [input, setInput] = React.useState(\"\");\n  const handleSend = () => {\n    if (input.trim() !== \"\") {\n      console.log(input);\n      setInput(\"\");\n    }\n  };\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      bgcolor: \"grey.200\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        overflow: \"auto\",\n        p: 2\n      },\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 2,\n        backgroundColor: \"background.default\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            size: \"small\",\n            fullWidth: true,\n            placeholder: \"Type a message\",\n            variant: \"outlined\",\n            value: input,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            fullWidth: true,\n            color: \"primary\",\n            variant: \"contained\",\n            endIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 38\n            }, this),\n            onClick: handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbotscreen, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n_c = Chatbotscreen;\nconst Message = ({\n  message\n}) => {\n  const isBot = message.sender === \"bot\";\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      justifyContent: isBot ? \"flex-start\" : \"flex-end\",\n      mb: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        flexDirection: isBot ? \"row\" : \"row-reverse\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        sx: {\n          bgcolor: isBot ? \"primary.main\" : \"secondary.main\"\n        },\n        children: isBot ? \"B\" : \"U\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        sx: {\n          p: 2,\n          ml: isBot ? 1 : 0,\n          mr: isBot ? 0 : 1,\n          backgroundColor: isBot ? \"primary.light\" : \"secondary.light\",\n          borderRadius: isBot ? \"20px 20px 20px 5px\" : \"20px 20px 5px 20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Message;\nexport default Chatbotscreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chatbotscreen\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"names":["React","Box","TextField","Button","Typography","Avatar","Grid","Paper","SendIcon","jsxDEV","_jsxDEV","messages","id","text","sender","Chatbotscreen","_s","input","setInput","useState","handleSend","trim","console","log","handleInputChange","event","target","value","sx","height","display","flexDirection","bgcolor","children","flexGrow","overflow","p","map","message","Message","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","container","spacing","item","xs","size","fullWidth","placeholder","variant","onChange","color","endIcon","onClick","_c","isBot","justifyContent","mb","alignItems","ml","mr","borderRadius","_c2","$RefreshReg$"],"sources":["D:/wb-project-prototype/client/src/component/ChatScreen/Chatbotscreen.jsx"],"sourcesContent":["import * as React from \"react\";\r\nimport {\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Typography,\r\n    Avatar,\r\n    Grid,\r\n    Paper,\r\n} from \"@mui/material\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\n\r\nconst messages = [\r\n    { id: 1, text: \"Hi there!\", sender: \"bot\" },\r\n    { id: 2, text: \"Hello!\", sender: \"user\" },\r\n    { id: 3, text: \"How can I assist you today?\", sender: \"bot\" },\r\n];\r\n\r\nconst Chatbotscreen = () => {\r\n    const [input, setInput] = React.useState(\"\");\r\n\r\n    const handleSend = () => {\r\n        if (input.trim() !== \"\") {\r\n            console.log(input);\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setInput(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                height: \"100vh\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                bgcolor: \"grey.200\",\r\n            }}\r\n        >\r\n            <Box sx={{ flexGrow: 1, overflow: \"auto\", p: 2 }}>\r\n                {messages.map((message) => (\r\n                    <Message key={message.id} message={message} />\r\n                ))}\r\n            </Box>\r\n            <Box sx={{ p: 2, backgroundColor: \"background.default\" }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={10}>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            placeholder=\"Type a message\"\r\n                            variant=\"outlined\"\r\n                            value={input}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Button\r\n                            fullWidth\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            endIcon={<SendIcon />}\r\n                            onClick={handleSend}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst Message = ({ message }) => {\r\n    const isBot = message.sender === \"bot\";\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                justifyContent: isBot ? \"flex-start\" : \"flex-end\",\r\n                mb: 2,\r\n            }}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: isBot ? \"row\" : \"row-reverse\",\r\n                    alignItems: \"center\",\r\n                }}\r\n            >\r\n                <Avatar sx={{ bgcolor: isBot ? \"primary.main\" : \"secondary.main\" }}>\r\n                    {isBot ? \"B\" : \"U\"}\r\n                </Avatar>\r\n                <Paper\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                        p: 2,\r\n                        ml: isBot ? 1 : 0,\r\n                        mr: isBot ? 0 : 1,\r\n                        backgroundColor: isBot ? \"primary.light\" : \"secondary.light\",\r\n                        borderRadius: isBot ? \"20px 20px 20px 5px\" : \"20px 20px 5px 20px\",\r\n                    }}\r\n                >\r\n                    <Typography variant=\"body1\">{message.text}</Typography>\r\n                </Paper>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Chatbotscreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}